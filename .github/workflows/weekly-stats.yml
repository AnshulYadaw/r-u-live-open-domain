name: 📊 Weekly Stats Report

on:
  schedule:
    - cron: '0 9 * * 1'  # Every Monday at 9 AM UTC
  workflow_dispatch:

jobs:
  generate-stats:
    runs-on: ubuntu-latest
    
    steps:
    - name: 📥 Checkout Repository
      uses: actions/checkout@v4

    - name: 🐍 Setup Python
      uses: actions/setup-python@v4
      with:
        python-version: '3.11'

    - name: 📦 Install Dependencies
      run: |
        pip install PyYAML requests matplotlib seaborn pandas

    - name: 📊 Generate Weekly Report
      run: |
        python << 'EOF'
        import os, yaml, glob, json
        from datetime import datetime, timedelta
        from collections import defaultdict, Counter
        import subprocess

        def get_git_stats():
            """Get Git statistics for the past week"""
            week_ago = (datetime.now() - timedelta(days=7)).isoformat()
            
            # Get commits from the past week
            result = subprocess.run([
                'git', 'log', '--since', week_ago, '--oneline', '--grep=Add subdomain'
            ], capture_output=True, text=True)
            
            commits = result.stdout.strip().split('\n') if result.stdout.strip() else []
            return len([c for c in commits if c.strip()])

        def analyze_subdomains():
            """Analyze current subdomain statistics"""
            stats = {
                'total_subdomains': 0,
                'record_types': Counter(),
                'domains_by_owner': Counter(),
                'top_level_domains': Counter(),
                'recent_additions': 0
            }
            
            week_ago = datetime.now() - timedelta(days=7)
            
            for yaml_file in glob.glob("subdomains/*.yaml"):
                try:
                    with open(yaml_file, 'r') as f:
                        data = yaml.safe_load(f)
                    
                    stats['total_subdomains'] += 1
                    
                    # Record types
                    if 'record' in data:
                        for record_type in data['record']:
                            stats['record_types'][record_type] += 1
                    
                    # Owners
                    if 'owner' in data and 'name' in data['owner']:
                        stats['domains_by_owner'][data['owner']['name']] += 1
                    
                    # Check if file is recent
                    file_stat = os.path.getctime(yaml_file)
                    if datetime.fromtimestamp(file_stat) > week_ago:
                        stats['recent_additions'] += 1
                    
                    # TLD analysis for CNAME records
                    if 'record' in data and 'CNAME' in data['record']:
                        domain = data['record']['CNAME']
                        if '.' in domain:
                            tld = domain.split('.')[-1]
                            stats['top_level_domains'][tld] += 1
                
                except Exception as e:
                    print(f"Error processing {yaml_file}: {e}")
            
            return stats

        def generate_report():
            """Generate the weekly report"""
            stats = analyze_subdomains()
            commits = get_git_stats()
            
            report = f"""# 📊 r-u.live Weekly Stats Report
            
**Report Date:** {datetime.now().strftime('%B %d, %Y')}
**Period:** {(datetime.now() - timedelta(days=7)).strftime('%B %d')} - {datetime.now().strftime('%B %d, %Y')}

## 📈 Growth Metrics

- **Total Subdomains:** {stats['total_subdomains']}
- **New This Week:** {stats['recent_additions']}
- **Commits This Week:** {commits}
- **Unique Contributors:** {len(stats['domains_by_owner'])}

## 🔧 Technical Breakdown

### Record Types Distribution
"""
            
            for record_type, count in stats['record_types'].most_common():
                percentage = (count / stats['total_subdomains'] * 100) if stats['total_subdomains'] > 0 else 0
                report += f"- **{record_type} Records:** {count} ({percentage:.1f}%)\n"
            
            report += "\n### Top Contributors\n"
            for owner, count in stats['domains_by_owner'].most_common(5):
                report += f"- **{owner}:** {count} subdomain(s)\n"
            
            if stats['top_level_domains']:
                report += "\n### Popular Target Domains (CNAME)\n"
                for tld, count in stats['top_level_domains'].most_common(5):
                    report += f"- **.{tld}:** {count} subdomain(s)\n"
            
            report += f"""

## 🎯 Community Health

- **Average subdomains per contributor:** {stats['total_subdomains'] / len(stats['domains_by_owner']) if len(stats['domains_by_owner']) > 0 else 0:.1f}
- **Growth rate:** {stats['recent_additions']} new subdomains this week
- **Repository activity:** {commits} related commits

## 🚀 Service Status

✅ All systems operational
🔄 Automated workflows running smoothly
🛡️ Security monitoring active

---

*This report is automatically generated every Monday. For questions or suggestions, please open an issue.*
"""
            
            return report

        # Generate and save report
        report_content = generate_report()
        
        # Save to file
        os.makedirs('reports', exist_ok=True)
        filename = f"reports/weekly-{datetime.now().strftime('%Y-%m-%d')}.md"
        with open(filename, 'w') as f:
            f.write(report_content)
        
        print("📊 Weekly Report Generated!")
        print("=" * 50)
        print(report_content)
        
        # Set output for next step
        with open(os.environ['GITHUB_ENV'], 'a') as f:
            f.write(f"REPORT_FILE={filename}\n")
            f.write(f"REPORT_CONTENT<<EOF\n{report_content}\nEOF\n")
        EOF

    - name: 📝 Create Discussion Post
      uses: actions/github-script@v7
      with:
        script: |
          // Create a discussion post with the weekly stats
          const discussion = await github.graphql(`
            mutation($repositoryId: ID!, $categoryId: ID!, $title: String!, $body: String!) {
              createDiscussion(input: {
                repositoryId: $repositoryId,
                categoryId: $categoryId,
                title: $title,
                body: $body
              }) {
                discussion {
                  id
                  url
                }
              }
            }
          `, {
            repositoryId: "${{ github.repository_id }}",
            categoryId: "DIC_kwDOAbCdGM4CgDeU", // You'll need to get this ID for your "General" category
            title: `📊 Weekly Stats - ${new Date().toLocaleDateString()}`,
            body: process.env.REPORT_CONTENT
          }).catch(err => {
            console.log("Could not create discussion (you may need to enable discussions):", err.message);
            return null;
          });
          
          if (discussion) {
            console.log("✅ Weekly stats discussion created:", discussion.createDiscussion.discussion.url);
          } else {
            console.log("ℹ️ Discussion creation skipped (discussions may not be enabled)");
          }

    - name: 💾 Commit Report
      run: |
        git config user.name "github-actions[bot]"
        git config user.email "github-actions[bot]@users.noreply.github.com"
        
        git add reports/
        git commit -m "📊 Add weekly stats report - $(date +%Y-%m-%d)" || echo "No changes to commit"
        git push origin main || echo "No changes to push"
